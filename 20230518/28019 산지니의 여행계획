import sys
input=sys.stdin.readline

n=m=0
roads_from_city={}
p=[0]

def search_path():

    global n,m

    n,m = map(int,input().split())
    roads=[tuple(map(int,input().split())) for _ in range(m)]
    roads.sort(key=lambda x: x[2])
    p.extend([i for i in range(1,n+1)])
    valid_roads = 0
    roads_from_city={i:[] for i in range(1,n+1)}

    while valid_roads < n-1:
        city1,city2,distance = roads.pop()
        if find(city1) != find(city2):
            union(city1, city2)
            roads_from_city[city1].append((city2,distance))
            roads_from_city[city2].append((city1,distance))
            valid_roads += 1
            print(roads_from_city)
    
def find(city):
    if city != p[city]: p[city]=find(p[city])
    return p[city]

def union(city1, city2):
    r1=find(city1)
    r2=find(city2)
    p[r2]=r1

travel_distance=0

def navigate(roadmap,city,visited):

    global n, travel_distance

    visited[city]=True
    if len(visited)==n:
        print(travel_distance)
        return
    
    for nextcity in roadmap[city]:
        if nextcity not in visited:
            travel_distance += roads_from_city[sorted((city,nextcity))]
            navigate(roadmap,city,visited)

def roadmap():
    roadmap={i:[] for i in range(1,n+1)}
    for road in roads_from_city:
        startcity,endcity,distance = road[0]
        roadmap[startcity].append(endcity)
        roadmap[endcity].append(startcity)

route_distance=0

def decide_route(startcity):

    global n

    visited={}

    navigate(roadmap(),startcity,visited,0)


def main():
    search_path()
    # decide_route(int(input()))
    # print(route_distance)
    print(roads_from_city)

main()